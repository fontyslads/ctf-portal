{"version":3,"sources":["models/enums/Team.ts","utils/axiosRequestHandler.ts","components/SubmitFlag/FlagAPI.ts","components/SubmitFlag/FlagSlice.ts","models/enums/FlagStatus.ts","components/SubmitFlag/SubmitFlag.tsx","components/FlagCard/FlagCard.tsx","components/FlagList/FlagList.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Team","CancelToken","axios","AxiosRequestHandler","url","cancel","this","api","get","cancelToken","c","then","res","data","catch","err","isCancel","response","object","post","put","delete","create","baseURL","process","listFlags","team","a","flags","submitFlag","id","hash","valid","FlagStatus","listFlagsAsync","createAsyncThunk","Blue","submitFlagAsync","test","value","flagSlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","map","flag","SubmitFlag","props","handleChange","bind","handleSubmit","event","setState","target","preventDefault","className","onSubmit","type","placeholder","onChange","Button","React","Component","connect","FlagCard","useState","open","setOpen","getBackgroundColor","status","Invalid","Valid","description","onClick","Collapse","in","FlagList","html","forEach","i","push","styles","getFlagCards","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","increment","decrement","incrementByAmount","pending","actions","store","configureStore","reducer","counter","counterReducer","flagReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.9b5a21b8.chunk.js","sourcesContent":["enum Team {\r\n  Red = \"Red\",\r\n  Blue = \"Blue\",\r\n}\r\n\r\nexport default Team;\r\n","import axios, { AxiosResponse, AxiosError, Canceler } from \"axios\";\r\nconst CancelToken = axios.CancelToken;\r\n\r\nclass AxiosRequestHandler {\r\n  private static cancel: Canceler;\r\n\r\n  private static api = axios.create({\r\n    baseURL: process.env.REACT_APP_API_HOST,\r\n  });\r\n\r\n  public static get(url: string): any {\r\n    if (AxiosRequestHandler.cancel) AxiosRequestHandler.cancel();\r\n    return this.api\r\n      .get(url, {\r\n        cancelToken: new CancelToken(function executor(c) {\r\n          AxiosRequestHandler.cancel = c;\r\n        }),\r\n      })\r\n      .then((res: AxiosResponse<any>) => {\r\n        return res.data;\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        if (axios.isCancel(err)) return;\r\n        if (err.response) {\r\n          return err.response;\r\n        }\r\n      });\r\n  }\r\n\r\n  public static post(url: string, object: any): any {\r\n    if (AxiosRequestHandler.cancel) AxiosRequestHandler.cancel();\r\n    return this.api\r\n      .post(url, object, {\r\n        cancelToken: new CancelToken(function executor(c) {\r\n          AxiosRequestHandler.cancel = c;\r\n        }),\r\n      })\r\n      .then((res: AxiosResponse<any>) => {\r\n        return res.data;\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        if (axios.isCancel(err)) return;\r\n        if (err.response) {\r\n          throw err.response;\r\n        }\r\n      });\r\n  }\r\n\r\n  public static put(url: string, object: any): any {\r\n    if (AxiosRequestHandler.cancel) AxiosRequestHandler.cancel();\r\n    return this.api\r\n      .put(url, object, {\r\n        cancelToken: new CancelToken(function executor(c) {\r\n          AxiosRequestHandler.cancel = c;\r\n        }),\r\n      })\r\n      .then((res: AxiosResponse<any>) => {\r\n        return res;\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        if (axios.isCancel(err)) return;\r\n        if (err.response) {\r\n          return err.response;\r\n        }\r\n      });\r\n  }\r\n\r\n  public static delete(url: string, object: any): any {\r\n    if (AxiosRequestHandler.cancel) AxiosRequestHandler.cancel();\r\n    return this.api\r\n      .delete(url, {\r\n        data: object,\r\n        cancelToken: new CancelToken(function executor(c) {\r\n          AxiosRequestHandler.cancel = c;\r\n        }),\r\n      })\r\n      .then((res: AxiosResponse<any>) => {\r\n        return res;\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        if (axios.isCancel(err)) return;\r\n        if (err.response) {\r\n          return err.response;\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport default AxiosRequestHandler;\r\n","import Team from \"../../models/enums/Team\";\nimport Flag from \"../../models/Flag\";\nimport AxiosRequestHandler from \"../../utils/axiosRequestHandler\";\n\nexport async function listFlags(team: Team) {\n  return AxiosRequestHandler.get(`/flag/${team}`)\n    .then((flags: Flag[]) => {\n      return flags;\n    })\n    .catch((err: any) => {\n      throw err;\n    });\n}\n\nexport async function submitFlag(\n  id: number,\n  hash: string,\n  team: string = \"Blue\"\n) {\n  return AxiosRequestHandler.post(\"/flag/submit\", { id, hash, team })\n    .then((valid: boolean) => {\n      return valid;\n    })\n    .catch((err: any) => {\n      throw err;\n    });\n}\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport Team from \"../../models/enums/Team\";\nimport Flag from \"../../models/Flag\";\nimport { submitFlag, listFlags } from \"./FlagAPI\";\n\nexport interface FlagState {\n  flags: Flag[];\n}\n\nconst initialState: FlagState = {\n  flags: [],\n};\n\nexport const listFlagsAsync = createAsyncThunk(\n  \"flag/listFlags\",\n  async (team: Team = Team.Blue) => {\n    return await listFlags(team);\n  }\n);\n\nexport const submitFlagAsync = createAsyncThunk(\n  \"flag/submitFlag\",\n  async (test: { id: number; value: string }) => {\n    return await submitFlag(test.id, test.value);\n  }\n);\n\nexport const flagSlice = createSlice({\n  name: \"flag\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      //listFlagsAsync\n      .addCase(listFlagsAsync.fulfilled, (state, action) => {\n        state.flags = action.payload;\n      })\n      //submitFlagAsync\n      .addCase(submitFlagAsync.fulfilled, (state, action) => {\n        state.flags = state.flags.map((flag) => {\n          if (flag.id === action.payload.id) {\n            flag = action.payload;\n          }\n          return flag;\n        });\n      });\n  },\n});\n\nexport const selectFlags = (state: RootState) => state.flag.flags;\n\nexport default flagSlice.reducer;\n","enum FlagStatus {\r\n  Valid = \"Valid\",\r\n  Invalid = \"Invalid\",\r\n  NotSubmitted = \"NotSubmitted\",\r\n}\r\n\r\nexport default FlagStatus;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport Flag from \"../../models/Flag\";\r\nimport { submitFlagAsync } from \"./FlagSlice\";\r\n\r\nclass SubmitFlag extends React.Component<\r\n  {\r\n    submitFlagAsync: (arg0: { id: number; value: string }) => void;\r\n    flag: Flag;\r\n  },\r\n  { value: string }\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = { value: \"\" };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event: { target: { value: string } }) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event: { preventDefault: () => void }) {\r\n    const test = {\r\n      id: this.props.flag.id,\r\n      value: this.state.value,\r\n    };\r\n\r\n    this.props.submitFlagAsync(test);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"flex gap-2\" onSubmit={this.handleSubmit}>\r\n        <div className=\"flex\">\r\n          <div>TODO: CAPTCHA</div>\r\n          <span className=\"text-sm border border-2 rounded-l px-4 py-2 bg-gray-300 whitespace-no-wrap\">\r\n            Flag:\r\n          </span>\r\n          <input\r\n            name=\"field_name\"\r\n            className=\"text-black border border-2 rounded-r px-4 py-2 w-full\"\r\n            type=\"text\"\r\n            placeholder=\"YoUr FlAg HeRe\"\r\n            onChange={this.handleChange}\r\n            value={this.state.value}\r\n          />\r\n        </div>\r\n\r\n        <Button type=\"submit\">Submit</Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { submitFlagAsync })(SubmitFlag);\r\n","import { useState } from \"react\";\nimport { Button, Collapse } from \"react-bootstrap\";\n\n//components\nimport SubmitFlag from \"../SubmitFlag/SubmitFlag\";\n\n//models\nimport Flag from \"../../models/Flag\";\nimport FlagStatus from \"../../models/enums/FlagStatus\";\n\nconst FlagCard = (props: { flag: Flag }) => {\n  const [open, setOpen] = useState(false);\n\n  function getBackgroundColor() {\n    switch (props.flag.status) {\n      case FlagStatus.Invalid:\n        return \"bg-red-500\";\n      case FlagStatus.Valid:\n        return \"bg-green-500\";\n      default:\n        return \"bg-gray-300\";\n    }\n  }\n\n  return (\n    <div className=\"flex md:contents\">\n      <div className=\"col-start-2 col-end-4 mr-10 md:mx-auto relative\">\n        <div className=\"h-full w-6 flex items-center justify-center\">\n          <div\n            className={`${getBackgroundColor()} h-full w-1 pointer-events-none`}\n          ></div>\n        </div>\n        <div\n          className={`${getBackgroundColor()} w-6 h-6 absolute top-1/2 -mt-3 rounded-full shadow text-center`}\n        >\n          <i className=\"fas fa-check-circle text-white\"></i>\n        </div>\n      </div>\n      <div\n        className={`${getBackgroundColor()} \n          col-start-4 col-end-12 p-4 rounded-xl my-4 mr-auto shadow-md w-full`}\n      >\n        <h3 className=\"font-semibold text-lg mb-1\">Flag {props.flag.id}</h3>\n        <p className=\"leading-tight text-justify w-full\">\n          {props.flag.description}\n        </p>\n        <Button\n          onClick={() => setOpen(!open)}\n          aria-controls=\"example-collapse-text\"\n          aria-expanded={open}\n        >\n          click\n        </Button>\n        <Collapse in={open}>\n          <div>\n            <SubmitFlag flag={props.flag} />\n          </div>\n        </Collapse>\n      </div>\n    </div>\n  );\n};\n\nexport default FlagCard;\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { listFlagsAsync } from \"../SubmitFlag/FlagSlice\";\r\nimport styles from \"./FlagList.module.scss\";\r\nimport Flag from \"../../models/Flag\";\r\nimport FlagCard from \"../FlagCard/FlagCard\";\r\n\r\nclass FlagList extends React.Component<{\r\n  listFlagsAsync: () => void;\r\n  flags: Flag[];\r\n}> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.props.listFlagsAsync();\r\n  }\r\n\r\n  getFlagCards() {\r\n    const html: JSX.Element[] = [];\r\n    const flags = this.props.flags || [];\r\n    flags.forEach((flag, i) => {\r\n      html.push(<FlagCard key={i} flag={flag} />);\r\n    });\r\n\r\n    return html;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.FlagList}>\r\n        <div className=\"p-4 mt-4\">\r\n          <h1 className=\"text-4xl text-center font-semibold mb-6\">Blue Team</h1>\r\n          <div className=\"container\">\r\n            <div className=\"flex flex-col md:grid grid-cols-12 text-gray-50\">\r\n              {this.getFlagCards()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: { flag: { flags: any } }) => {\r\n  return {\r\n    flags: state.flag.flags,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { listFlagsAsync })(FlagList);\r\n","import React from \"react\";\nimport \"./App.scss\";\n\n//components\nimport FlagList from \"./components/FlagList/FlagList\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <FlagList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"../../app/store\";\nimport { fetchCount } from \"./counterAPI\";\n\nexport interface CounterState {\n  value: number;\n  status: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: \"idle\",\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  \"counter/fetchCount\",\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\nimport flagReducer from \"../components/SubmitFlag/FlagSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    flag: flagReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}